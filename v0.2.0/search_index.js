var documenterSearchIndex = {"docs":
[{"location":"example/corpus/#Modelling-a-text-corpus","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"","category":"section"},{"location":"example/corpus/#Background","page":"Modelling a text corpus","title":"Background","text":"","category":"section"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"From CitableText and CitableCorpus:","category":"page"},{"location":"example/corpus/#Load-a-corpus","page":"Modelling a text corpus","title":"Load a corpus","text":"","category":"section"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"In these examples, we'll work with a corpus of the extant versions of the Gettysburg Address.  We'll load it into the CitableTextCorpus model from a URL.","category":"page"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"using CitableCorpus\ncorpusurl = \"https://raw.githubusercontent.com/neelsmith/CitableCorpusAnalysis.jl/main/test/data/gettysburg/gettysburgcorpus.cex\"\ncorpus = corpus_fromurl(corpusurl, \"|\")\ntypeof(corpus)\n\n# output\n\nCitableTextCorpus","category":"page"},{"location":"example/corpus/#Retrieve-passages","page":"Modelling a text corpus","title":"Retrieve passages","text":"","category":"section"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"Some key functions from libraries implementing Orthography and CitableParser:","category":"page"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"orthography: validation\northography: tokenization\nmorphological analysis","category":"page"},{"location":"example/corpus/#Interoperating-with-Julia-TextAnalysis.Corpus","page":"Modelling a text corpus","title":"Interoperating with Julia TextAnalysis.Corpus","text":"","category":"section"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"generate a TextAnalysis.Corpus from a CitableCorpus","category":"page"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"Sometimes, you'll want to preprocess the original CitableCorpus so as not to depend on the tokenization of the TextAnalysis module.  You can do this by creating a tokenized corpus that takes account of a specified orthography, and constructing a TextAnalysis.Corpus from this source.","category":"page"},{"location":"example/corpus/#Profiling-a-corpus","page":"Modelling a text corpus","title":"Profiling a corpus","text":"","category":"section"},{"location":"example/corpus/","page":"Modelling a text corpus","title":"Modelling a text corpus","text":"lexical metrics\nmorphological metrics","category":"page"},{"location":"#CitableCorpusAnalysis.jl","page":"Overview","title":"CitableCorpusAnalysis.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Tokenize and analyze a citable text corpus.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"There are many ways to model a text corpus.  CitableCorpusAnalysis integrates the models from these Julia modules:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Corpus in TextAnalysis\nCorpus in TopicModelsVB\nCitableTextCorpus in CitableCorpus","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"It also introduces a further model, the AnalyticalCorpus.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"warning: Warning\nThe CitableCorpusAnalysis module is in very early stages of development, and is intended for experimental use.","category":"page"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"An AnalyticalCorpus has three components:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"a citable corpus of texts (a CitableText.CitableTextCorpus)\nan orthographic system that can validate orthography and tokenize a citable text (an Orthography.OrthographicSystem)\na citable parser, that analyses citable tokens in terms of citable lexemes and morphological or other data (a CitableParserBuilder.CitableParser)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Functions working an AnalyticalCorpus can tokenize a corpus, analyze its tokens with a CitableParser, and can apply the corpus analytical functions of a TextAnalysis.Corpus and a TopicsModelsVB.Corpus to any citable text content.","category":"page"},{"location":"#Example-pages","page":"Overview","title":"Example pages","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The following pages walk through examples using a small corpus comprising all the extant versions of the Gettysburg address.  We will tokenize it with a simple ASCII tokenizer included in the Orthography module, and will parse it with a custom GettysburgParser built for this demo. (Its construction is documented in the appendix to these pages, and illustrates one simple way to build an English-language parser by wrapping the Python NLTK POS tagger.)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using CitableCorpusAnalysis\nusing CitableCorpus\nusing Orthography\n\ncorpus = corpus_fromurl(\"https://raw.githubusercontent.com/neelsmith/CitableCorpusAnalysis.jl/main/test/data/gettysburg/gettysburgcorpus.cex\", \"|\")\northography = Orthography.simpleAscii()\nparser = CitableCorpusAnalysis.gettysburgParser()\nacorpus = AnalyticalCorpus(corpus, orthography, parser)\ntypeof(acorpus)\n\n# output\n\nAnalyticalCorpus","category":"page"},{"location":"man/api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"man/api/","page":"API Documentation","title":"API Documentation","text":"Formal API docs go here.","category":"page"},{"location":"example/parser/#Appendix:-a-note-on-the-citable-parser","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"","category":"section"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"The GettysburgParser used in this demonstration works with a simple dictionary of tokens to POS tags.  The dictionary was constructed by wrapping the Python NLTK POS tagger with a Julia function. This page documents how to do that so that you can generically apply the NTLK tagger to a list of tokens from Julia.","category":"page"},{"location":"example/parser/#Python-prerequisites","page":"Appendix: a note on the citable parser","title":"Python prerequisites","text":"","category":"section"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"You need to have Python, with nltk.","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"pip install nltk","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"Then start python, and at the python prompt,","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"import nltk\nnltk.download","category":"page"},{"location":"example/parser/#A-Julia-wrapper","page":"Appendix: a note on the citable parser","title":"A Julia wrapper","text":"","category":"section"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"repo = pwd() |> dirname  |> dirname |> dirname\ngburgfile = repo * \"/test/data/gettysburg/gettysburgcorpus.cex\"\nusing CitableCorpus\ncorpus = corpus_fromfile(gburgfile, \"|\")","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"note: Note\nIn the extra directory, the script engpos.jl does everything documented here, and can be run from the command line from the root of the repository with julia --project=extra/ extra/engpos.jl","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"In Julia, you can make the NLTK module's tag function available like this:","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"using Conda\nConda.add(\"nltk\")\nusing PyCall\n@pyimport nltk.tag as ptag","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"Now if we have a citable corpus named corpus, we can use the TextAnalysis functions to extract a unique lexicon, and apply the NLTK tagger to it.","category":"page"},{"location":"example/parser/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"using CitableCorpusAnalysis\nusing TextAnalysis\ntacorp = tacorpus(corpus)\n\ntkns = []\nfor doc in tacorp.documents\n    push!(tkns, tokens(doc))\nend\ntknlist = tkns |> Iterators.flatten |> collect |> unique\ntagged = ptag.pos_tag(tknlist)","category":"page"}]
}
